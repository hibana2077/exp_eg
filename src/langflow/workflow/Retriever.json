{
  "data": {
    "edges": [
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-fZXuR",
            "name": "text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "ip_address",
            "id": "ArXivComponent-1Nu0R",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__TextInput-fZXuR{œdataTypeœ:œTextInputœ,œidœ:œTextInput-fZXuRœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-ArXivComponent-1Nu0R{œfieldNameœ:œip_addressœ,œidœ:œArXivComponent-1Nu0Rœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "TextInput-fZXuR",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-fZXuRœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ArXivComponent-1Nu0R",
        "targetHandle": "{œfieldNameœ:œip_addressœ,œidœ:œArXivComponent-1Nu0Rœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-fZXuR",
            "name": "text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "ip_address",
            "id": "CustomRetrievalComponent-XN3c0",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__TextInput-fZXuR{œdataTypeœ:œTextInputœ,œidœ:œTextInput-fZXuRœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CustomRetrievalComponent-XN3c0{œfieldNameœ:œip_addressœ,œidœ:œCustomRetrievalComponent-XN3c0œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "TextInput-fZXuR",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-fZXuRœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CustomRetrievalComponent-XN3c0",
        "targetHandle": "{œfieldNameœ:œip_addressœ,œidœ:œCustomRetrievalComponent-XN3c0œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "LanguageModelComponent",
            "id": "CustomComponent-PPQGp",
            "name": "model_output",
            "output_types": [
              "LanguageModel"
            ]
          },
          "targetHandle": {
            "fieldName": "agent_llm",
            "id": "Agent-8A58C",
            "inputTypes": [
              "LanguageModel"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__CustomComponent-PPQGp{œdataTypeœ:œLanguageModelComponentœ,œidœ:œCustomComponent-PPQGpœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}-Agent-8A58C{œfieldNameœ:œagent_llmœ,œidœ:œAgent-8A58Cœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "CustomComponent-PPQGp",
        "sourceHandle": "{œdataTypeœ:œLanguageModelComponentœ,œidœ:œCustomComponent-PPQGpœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}",
        "target": "Agent-8A58C",
        "targetHandle": "{œfieldNameœ:œagent_llmœ,œidœ:œAgent-8A58Cœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-wIzOY",
            "name": "message",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "Agent-8A58C",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__ChatInput-wIzOY{œdataTypeœ:œChatInputœ,œidœ:œChatInput-wIzOYœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Agent-8A58C{œfieldNameœ:œinput_valueœ,œidœ:œAgent-8A58Cœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "ChatInput-wIzOY",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-wIzOYœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Agent-8A58C",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œAgent-8A58Cœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "Agent",
            "id": "Agent-8A58C",
            "name": "response",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-qic1W",
            "inputTypes": [
              "Data",
              "DataFrame",
              "Message"
            ],
            "type": "other"
          }
        },
        "id": "xy-edge__Agent-8A58C{œdataTypeœ:œAgentœ,œidœ:œAgent-8A58Cœ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-qic1W{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-qic1Wœ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "Agent-8A58C",
        "sourceHandle": "{œdataTypeœ:œAgentœ,œidœ:œAgent-8A58Cœ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ChatOutput-qic1W",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-qic1Wœ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ListTablesComponent",
            "id": "CustomRetrievalComponent-XN3c0",
            "name": "component_as_tool",
            "output_types": [
              "Tool"
            ]
          },
          "targetHandle": {
            "fieldName": "tools",
            "id": "Agent-8A58C",
            "inputTypes": [
              "Tool"
            ],
            "type": "other"
          }
        },
        "id": "xy-edge__CustomRetrievalComponent-XN3c0{œdataTypeœ:œListTablesComponentœ,œidœ:œCustomRetrievalComponent-XN3c0œ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}-Agent-8A58C{œfieldNameœ:œtoolsœ,œidœ:œAgent-8A58Cœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "CustomRetrievalComponent-XN3c0",
        "sourceHandle": "{œdataTypeœ:œListTablesComponentœ,œidœ:œCustomRetrievalComponent-XN3c0œ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}",
        "target": "Agent-8A58C",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgent-8A58Cœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "SearchRetrievalComponent",
            "id": "ArXivComponent-1Nu0R",
            "name": "component_as_tool",
            "output_types": [
              "Tool"
            ]
          },
          "targetHandle": {
            "fieldName": "tools",
            "id": "Agent-8A58C",
            "inputTypes": [
              "Tool"
            ],
            "type": "other"
          }
        },
        "id": "xy-edge__ArXivComponent-1Nu0R{œdataTypeœ:œSearchRetrievalComponentœ,œidœ:œArXivComponent-1Nu0Rœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}-Agent-8A58C{œfieldNameœ:œtoolsœ,œidœ:œAgent-8A58Cœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "ArXivComponent-1Nu0R",
        "sourceHandle": "{œdataTypeœ:œSearchRetrievalComponentœ,œidœ:œArXivComponent-1Nu0Rœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}",
        "target": "Agent-8A58C",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgent-8A58Cœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "RunFlow",
            "id": "RunFlow-1MCrE",
            "name": "component_as_tool",
            "output_types": [
              "Tool"
            ]
          },
          "targetHandle": {
            "fieldName": "tools",
            "id": "Agent-8A58C",
            "inputTypes": [
              "Tool"
            ],
            "type": "other"
          }
        },
        "id": "xy-edge__RunFlow-1MCrE{œdataTypeœ:œRunFlowœ,œidœ:œRunFlow-1MCrEœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}-Agent-8A58C{œfieldNameœ:œtoolsœ,œidœ:œAgent-8A58Cœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "RunFlow-1MCrE",
        "sourceHandle": "{œdataTypeœ:œRunFlowœ,œidœ:œRunFlow-1MCrEœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}",
        "target": "Agent-8A58C",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgent-8A58Cœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}"
      }
    ],
    "nodes": [
      {
        "data": {
          "id": "ChatInput-wIzOY",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Get chat inputs from the Playground.",
            "display_name": "Chat Input",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "files",
              "background_color",
              "chat_icon",
              "text_color"
            ],
            "frozen": false,
            "icon": "MessagesSquare",
            "legacy": false,
            "lf_version": "1.4.2",
            "metadata": {},
            "minimized": true,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Message",
                "method": "message_response",
                "name": "message",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "background_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Background Color",
                "dynamic": false,
                "info": "The background color of the icon.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "background_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "chat_icon": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Icon",
                "dynamic": false,
                "info": "The icon of the message.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "chat_icon",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import (\n    DropdownInput,\n    FileInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n)\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_USER,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatInput\"\n    minimized = True\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n            input_types=[],\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n            temp_file=True,\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    async def message_response(self) -> Message:\n        background_color = self.background_color\n        text_color = self.text_color\n        icon = self.chat_icon\n\n        message = await Message.create(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n            properties={\n                \"background_color\": background_color,\n                \"text_color\": text_color,\n                \"icon\": icon,\n            },\n        )\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n"
              },
              "files": {
                "_input_type": "FileInput",
                "advanced": true,
                "display_name": "Files",
                "dynamic": false,
                "fileTypes": [
                  "txt",
                  "md",
                  "mdx",
                  "csv",
                  "json",
                  "yaml",
                  "yml",
                  "xml",
                  "html",
                  "htm",
                  "pdf",
                  "docx",
                  "py",
                  "sh",
                  "sql",
                  "js",
                  "ts",
                  "tsx",
                  "jpg",
                  "jpeg",
                  "png",
                  "bmp",
                  "image"
                ],
                "file_path": "",
                "info": "Files to be sent with the message.",
                "list": true,
                "list_add_label": "Add More",
                "name": "files",
                "placeholder": "",
                "required": false,
                "show": true,
                "temp_file": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "file",
                "value": ""
              },
              "input_value": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Text",
                "dynamic": false,
                "info": "Message to be passed as input.",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "sender": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Sender Type",
                "dynamic": false,
                "info": "Type of sender.",
                "name": "sender",
                "options": [
                  "Machine",
                  "User"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "User"
              },
              "sender_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sender Name",
                "dynamic": false,
                "info": "Name of the sender.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "User"
              },
              "session_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "should_store_message": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Store Messages",
                "dynamic": false,
                "info": "Store the message in the history.",
                "list": false,
                "list_add_label": "Add More",
                "name": "should_store_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "text_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Text Color",
                "dynamic": false,
                "info": "The text color of the name",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "text_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": false,
          "type": "ChatInput"
        },
        "dragging": false,
        "id": "ChatInput-wIzOY",
        "measured": {
          "height": 66,
          "width": 192
        },
        "position": {
          "x": 148.56704087986574,
          "y": 34.98201187146387
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "ChatOutput-qic1W",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Display a chat message in the Playground.",
            "display_name": "Chat Output",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "data_template",
              "background_color",
              "chat_icon",
              "text_color",
              "clean_data"
            ],
            "frozen": false,
            "icon": "MessagesSquare",
            "legacy": false,
            "lf_version": "1.4.2",
            "metadata": {},
            "minimized": true,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Message",
                "method": "message_response",
                "name": "message",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "background_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Background Color",
                "dynamic": false,
                "info": "The background color of the icon.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "background_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "chat_icon": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Icon",
                "dynamic": false,
                "info": "The icon of the message.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "chat_icon",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "clean_data": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Basic Clean Data",
                "dynamic": false,
                "info": "Whether to clean the data",
                "list": false,
                "list_add_label": "Add More",
                "name": "clean_data",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from collections.abc import Generator\nfrom typing import Any\n\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.inputs.inputs import HandleInput\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        HandleInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n            input_types=[\"Data\", \"DataFrame\", \"Message\"],\n            required=True,\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"clean_data\",\n            display_name=\"Basic Clean Data\",\n            value=True,\n            info=\"Whether to clean the data\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            # Handle case where source is a ChatOpenAI object\n            if hasattr(source, \"model_name\"):\n                source_dict[\"source\"] = source.model_name\n            elif hasattr(source, \"model\"):\n                source_dict[\"source\"] = str(source.model)\n            else:\n                source_dict[\"source\"] = str(source)\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        # First convert the input to string if needed\n        text = self.convert_to_string()\n        # Get source properties\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n        background_color = self.background_color\n        text_color = self.text_color\n        if self.chat_icon:\n            icon = self.chat_icon\n\n        # Create or use existing Message object\n        if isinstance(self.input_value, Message):\n            message = self.input_value\n            # Update message properties\n            message.text = text\n        else:\n            message = Message(text=text)\n\n        # Set message properties\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n        message.properties.icon = icon\n        message.properties.background_color = background_color\n        message.properties.text_color = text_color\n\n        # Store message if needed\n        if self.session_id and self.should_store_message:\n            stored_message = await self.send_message(message)\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n\n    def _validate_input(self) -> None:\n        \"\"\"Validate the input data and raise ValueError if invalid.\"\"\"\n        if self.input_value is None:\n            msg = \"Input data cannot be None\"\n            raise ValueError(msg)\n        if isinstance(self.input_value, list) and not all(\n            isinstance(item, Message | Data | DataFrame | str) for item in self.input_value\n        ):\n            invalid_types = [\n                type(item).__name__\n                for item in self.input_value\n                if not isinstance(item, Message | Data | DataFrame | str)\n            ]\n            msg = f\"Expected Data or DataFrame or Message or str, got {invalid_types}\"\n            raise TypeError(msg)\n        if not isinstance(\n            self.input_value,\n            Message | Data | DataFrame | str | list | Generator | type(None),\n        ):\n            type_name = type(self.input_value).__name__\n            msg = f\"Expected Data or DataFrame or Message or str, Generator or None, got {type_name}\"\n            raise TypeError(msg)\n\n    def _safe_convert(self, data: Any) -> str:\n        \"\"\"Safely convert input data to string.\"\"\"\n        try:\n            if isinstance(data, str):\n                return data\n            if isinstance(data, Message):\n                return data.get_text()\n            if isinstance(data, Data):\n                if data.get_text() is None:\n                    msg = \"Empty Data object\"\n                    raise ValueError(msg)\n                return data.get_text()\n            if isinstance(data, DataFrame):\n                if self.clean_data:\n                    # Remove empty rows\n                    data = data.dropna(how=\"all\")\n                    # Remove empty lines in each cell\n                    data = data.replace(r\"^\\s*$\", \"\", regex=True)\n                    # Replace multiple newlines with a single newline\n                    data = data.replace(r\"\\n+\", \"\\n\", regex=True)\n\n                # Replace pipe characters to avoid markdown table issues\n                processed_data = data.replace(r\"\\|\", r\"\\\\|\", regex=True)\n\n                processed_data = processed_data.map(\n                    lambda x: str(x).replace(\"\\n\", \"<br/>\") if isinstance(x, str) else x\n                )\n\n                return processed_data.to_markdown(index=False)\n            return str(data)\n        except (ValueError, TypeError, AttributeError) as e:\n            msg = f\"Error converting data: {e!s}\"\n            raise ValueError(msg) from e\n\n    def convert_to_string(self) -> str | Generator[Any, None, None]:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        self._validate_input()\n        if isinstance(self.input_value, list):\n            return \"\\n\".join([self._safe_convert(item) for item in self.input_value])\n        if isinstance(self.input_value, Generator):\n            return self.input_value\n        return self._safe_convert(self.input_value)\n"
              },
              "data_template": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Data Template",
                "dynamic": false,
                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "data_template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "{text}"
              },
              "input_value": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Text",
                "dynamic": false,
                "info": "Message to be passed as output.",
                "input_types": [
                  "Data",
                  "DataFrame",
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "input_value",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "sender": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Sender Type",
                "dynamic": false,
                "info": "Type of sender.",
                "name": "sender",
                "options": [
                  "Machine",
                  "User"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Machine"
              },
              "sender_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sender Name",
                "dynamic": false,
                "info": "Name of the sender.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "AI"
              },
              "session_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "should_store_message": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Store Messages",
                "dynamic": false,
                "info": "Store the message in the history.",
                "list": false,
                "list_add_label": "Add More",
                "name": "should_store_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "text_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Text Color",
                "dynamic": false,
                "info": "The text color of the name",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "text_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": false,
          "type": "ChatOutput"
        },
        "dragging": false,
        "id": "ChatOutput-qic1W",
        "measured": {
          "height": 66,
          "width": 192
        },
        "position": {
          "x": 1214.4119750849038,
          "y": -241.33733790778888
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "ArXivComponent-1Nu0R",
          "node": {
            "base_classes": [
              "Data",
              "DataFrame"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Search and retrieve data from custom knowledge base API",
            "display_name": "Search Retrieval",
            "documentation": "",
            "edited": true,
            "field_order": [
              "ip_address",
              "kb_name",
              "search_query",
              "selected_tables",
              "return_format",
              "limit",
              "top_k",
              "do_image_search",
              "do_coord_search"
            ],
            "frozen": false,
            "icon": "Search",
            "legacy": false,
            "lf_version": "1.4.2",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Toolset",
                "hidden": null,
                "method": "to_toolkit",
                "name": "component_as_tool",
                "options": null,
                "required_inputs": null,
                "selected": "Tool",
                "tool_mode": true,
                "types": [
                  "Tool"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "import urllib.request\nimport urllib.parse\nimport json\nfrom urllib.parse import urlparse\n\nfrom langflow.custom import Component\nfrom langflow.io import DropdownInput, IntInput, MessageTextInput, Output, BoolInput\nfrom langflow.schema import Data, DataFrame\n\n\nclass SearchRetrievalComponent(Component):\n    display_name = \"Search Retrieval\"\n    description = \"Search and retrieve data from custom knowledge base API\"\n    icon = \"Search\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"ip_address\",\n            display_name=\"IP Address\",\n            info=\"The IP address of your API server (e.g., '192.168.1.100')\",\n            value=\"IP_PLACEHOLD\",\n        ),\n        MessageTextInput(\n            name=\"kb_name\",\n            display_name=\"Knowledge Base Name\",\n            info=\"The name of the knowledge base\",\n            tool_mode=True,\n        ),\n        MessageTextInput(\n            name=\"search_query\",\n            display_name=\"Search Query\",\n            info=\"The text query to search for\",\n            tool_mode=True,\n        ),\n        MessageTextInput(\n            name=\"selected_tables\",\n            display_name=\"Selected Tables\",\n            info=\"JSON string of selected tables in format: [['texts_table_name', 'images_table_name', 'tables_table_name'], ...]\",\n            tool_mode=True,\n        ),\n        DropdownInput(\n            name=\"return_format\",\n            display_name=\"Return Format\",\n            info=\"The format to return results in\",\n            options=[\"pd\", \"pl\", \"arrow\", \"raw\"],\n            value=\"pd\",\n        ),\n        IntInput(\n            name=\"limit\",\n            display_name=\"Max Results\",\n            info=\"Maximum number of results to return\",\n            value=10,\n        ),\n        IntInput(\n            name=\"top_k\",\n            display_name=\"Top K\",\n            info=\"Top K results for text search (used in conditions.text.topn)\",\n            value=5,\n        ),\n        BoolInput(\n            name=\"do_image_search\",\n            display_name=\"Image Search\",\n            info=\"Enable image search\",\n            value=False,\n        ),\n        BoolInput(\n            name=\"do_coord_search\",\n            display_name=\"Coordinate Search\",\n            info=\"Enable coordinate search\",\n            value=False,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"search_knowledge_base\"),\n        Output(display_name=\"DataFrame\", name=\"dataframe\", method=\"as_dataframe\"),\n    ]\n\n    def build_search_url(self) -> str:\n        \"\"\"Build the API URL for search endpoint.\"\"\"\n        port = 14514\n        return f\"http://{self.ip_address}:{port}/search\"\n\n    def search_knowledge_base(self) -> list[Data]:\n        \"\"\"Search the knowledge base.\"\"\"\n        try:\n            url = self.build_search_url()\n            \n            # Parse selected tables from input (expecting JSON string)\n            try:\n                if isinstance(self.selected_tables, str):\n                    selected_tables = json.loads(self.selected_tables)\n                else:\n                    selected_tables = self.selected_tables\n            except (json.JSONDecodeError, TypeError):\n                # If parsing fails, use default empty list\n                selected_tables = []\n            \n            # Prepare search payload based on your API spec (matching kb.py structure)\n            search_payload = {\n                \"kb_name\": self.kb_name,\n                \"tables\": selected_tables,  # Use the selected tables structure\n                \"select_cols\": [\"*\"],\n                \"conditions\": {\n                    \"text\": [\n                        {\n                            \"field\": \"text\", \n                            \"query\": self.search_query, \n                            \"topn\": self.top_k\n                        }\n                    ]\n                },\n                \"do_image_search\": self.do_image_search,\n                \"do_coord_search\": self.do_coord_search,\n                \"limit\": self.top_k,\n                \"return_format\": self.return_format\n            }\n            \n            # Validate URL\n            parsed_url = urlparse(url)\n            if parsed_url.scheme not in {\"http\", \"https\"}:\n                raise ValueError(f\"Invalid URL scheme: {parsed_url.scheme}\")\n            \n            # Make POST request\n            data = json.dumps(search_payload).encode('utf-8')\n            request = urllib.request.Request(url, data=data, method='POST')\n            request.add_header('Content-Type', 'application/json')\n            \n            with urllib.request.urlopen(request) as response:\n                response_text = response.read().decode(\"utf-8\")\n                result = json.loads(response_text)\n                \n            if result.get(\"status\") == \"success\":\n                search_results = result.get(\"tables\", {})\n                results = [Data(data={\"search_results\": search_results, \"operation\": \"search\"})]\n                self.status = results\n                return results\n            else:\n                error_msg = f\"API error: {result.get('message', 'Unknown error')}\"\n                error_data = Data(data={\"error\": error_msg})\n                self.status = error_data\n                return [error_data]\n                \n        except Exception as e:\n            error_data = Data(data={\"error\": f\"Request error: {str(e)}\"})\n            self.status = error_data\n            return [error_data]\n\n    def as_dataframe(self) -> DataFrame:\n        \"\"\"Convert the search results to a DataFrame.\n\n        Returns:\n            DataFrame: A DataFrame containing the search results.\n        \"\"\"\n        data = self.search_knowledge_base()\n        if isinstance(data, list):\n            return DataFrame(data=[d.data for d in data])\n        return DataFrame(data=[data.data])\n"
              },
              "do_coord_search": {
                "_input_type": "BoolInput",
                "advanced": false,
                "display_name": "Coordinate Search",
                "dynamic": false,
                "info": "Enable coordinate search",
                "list": false,
                "list_add_label": "Add More",
                "name": "do_coord_search",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "do_image_search": {
                "_input_type": "BoolInput",
                "advanced": false,
                "display_name": "Image Search",
                "dynamic": false,
                "info": "Enable image search",
                "list": false,
                "list_add_label": "Add More",
                "name": "do_image_search",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "ip_address": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "IP Address",
                "dynamic": false,
                "info": "The IP address of your API server (e.g., '192.168.1.100')",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "ip_address",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "kb_name": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Knowledge Base Name",
                "dynamic": false,
                "info": "The name of the knowledge base",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "kb_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "test"
              },
              "limit": {
                "_input_type": "IntInput",
                "advanced": false,
                "display_name": "Max Results",
                "dynamic": false,
                "info": "Maximum number of results to return",
                "list": false,
                "list_add_label": "Add More",
                "name": "limit",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 5
              },
              "return_format": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Return Format",
                "dynamic": false,
                "info": "The format to return results in",
                "load_from_db": false,
                "name": "return_format",
                "options": [
                  "pd",
                  "pl",
                  "arrow",
                  "raw"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "raw"
              },
              "search_query": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Search Query",
                "dynamic": false,
                "info": "The text query to search for",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "search_query",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "selected_tables": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Selected Tables",
                "dynamic": false,
                "info": "JSON string of selected tables in format: [['texts_table_name', 'images_table_name', 'tables_table_name'], ...]",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "selected_tables",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "tools_metadata": {
                "_input_type": "ToolsInput",
                "advanced": false,
                "display_name": "Actions",
                "dynamic": false,
                "info": "Modify tool names and descriptions to help agents understand when to use each tool.",
                "is_list": true,
                "list_add_label": "Add More",
                "name": "tools_metadata",
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "tools",
                "value": [
                  {
                    "args": {
                      "kb_name": {
                        "default": "",
                        "description": "The name of the knowledge base",
                        "title": "Kb Name",
                        "type": "string"
                      },
                      "search_query": {
                        "default": "",
                        "description": "The text query to search for",
                        "title": "Search Query",
                        "type": "string"
                      },
                      "selected_tables": {
                        "default": "",
                        "description": "JSON string of selected tables in format: [['texts_table_name', 'images_table_name', 'tables_table_name'], ...]",
                        "title": "Selected Tables",
                        "type": "string"
                      }
                    },
                    "description": "SearchRetrievalComponent. search_knowledge_base - Search and retrieve data from custom knowledge base API",
                    "display_description": "SearchRetrievalComponent. search_knowledge_base - Search and retrieve data from custom knowledge base API",
                    "display_name": "search_knowledge_base",
                    "name": "search_knowledge_base",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "search_knowledge_base"
                    ]
                  },
                  {
                    "args": {
                      "kb_name": {
                        "default": "",
                        "description": "The name of the knowledge base",
                        "title": "Kb Name",
                        "type": "string"
                      },
                      "search_query": {
                        "default": "",
                        "description": "The text query to search for",
                        "title": "Search Query",
                        "type": "string"
                      },
                      "selected_tables": {
                        "default": "",
                        "description": "JSON string of selected tables in format: [['texts_table_name', 'images_table_name', 'tables_table_name'], ...]",
                        "title": "Selected Tables",
                        "type": "string"
                      }
                    },
                    "description": "SearchRetrievalComponent. as_dataframe - Search and retrieve data from custom knowledge base API",
                    "display_description": "SearchRetrievalComponent. as_dataframe - Search and retrieve data from custom knowledge base API",
                    "display_name": "as_dataframe",
                    "name": "as_dataframe",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "as_dataframe"
                    ]
                  }
                ]
              },
              "top_k": {
                "_input_type": "IntInput",
                "advanced": false,
                "display_name": "Top K",
                "dynamic": false,
                "info": "Top K results for text search (used in conditions.text.topn)",
                "list": false,
                "list_add_label": "Add More",
                "name": "top_k",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 5
              }
            },
            "tool_mode": true
          },
          "showNode": true,
          "type": "SearchRetrievalComponent"
        },
        "dragging": false,
        "id": "ArXivComponent-1Nu0R",
        "measured": {
          "height": 659,
          "width": 320
        },
        "position": {
          "x": 67.02865425298035,
          "y": -660.7893224101623
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "CustomRetrievalComponent-XN3c0",
          "node": {
            "base_classes": [
              "Data",
              "DataFrame"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "List all tables from custom knowledge base API",
            "display_name": "List Tables",
            "documentation": "",
            "edited": true,
            "field_order": [
              "ip_address",
              "kb_owner",
              "kb_name"
            ],
            "frozen": false,
            "icon": "List",
            "legacy": false,
            "lf_version": "1.4.2",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Toolset",
                "hidden": null,
                "method": "to_toolkit",
                "name": "component_as_tool",
                "options": null,
                "required_inputs": null,
                "selected": "Tool",
                "tool_mode": true,
                "types": [
                  "Tool"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "import urllib.request\nimport urllib.parse\nimport json\nfrom urllib.parse import urlparse\n\nfrom langflow.custom import Component\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema import Data, DataFrame\n\n\nclass ListTablesComponent(Component):\n    display_name = \"List Tables\"\n    description = \"List all tables from custom knowledge base API\"\n    icon = \"List\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"ip_address\",\n            display_name=\"IP Address\",\n            info=\"The IP address of your API server (e.g., '192.168.1.100')\",\n            value=\"IP_PLACEHOLD\",\n        ),\n        MessageTextInput(\n            name=\"kb_owner\",\n            display_name=\"Knowledge Base Owner\",\n            info=\"The owner of the knowledge base\",\n            tool_mode=True,\n        ),\n        MessageTextInput(\n            name=\"kb_name\",\n            display_name=\"Knowledge Base Name\",\n            info=\"The name of the knowledge base\",\n            tool_mode=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"list_tables\"),\n        Output(display_name=\"DataFrame\", name=\"dataframe\", method=\"as_dataframe\"),\n    ]\n\n    def build_list_tables_url(self) -> str:\n        \"\"\"Build the API URL for list_tables endpoint.\"\"\"\n        port = 14514\n        return f\"http://{self.ip_address}:{port}/list_tables/{self.kb_owner}/{self.kb_name}\"\n\n    def list_tables(self) -> list[Data]:\n        \"\"\"List all tables for the given knowledge base.\"\"\"\n        try:\n            url = self.build_list_tables_url()\n            \n            # Validate URL\n            parsed_url = urlparse(url)\n            if parsed_url.scheme not in {\"http\", \"https\"}:\n                raise ValueError(f\"Invalid URL scheme: {parsed_url.scheme}\")\n            \n            # Make GET request\n            request = urllib.request.Request(url, method='GET')\n            request.add_header('Content-Type', 'application/json')\n            \n            with urllib.request.urlopen(request) as response:\n                response_text = response.read().decode(\"utf-8\")\n                result = json.loads(response_text)\n                \n            if result.get(\"status\") == \"success\":\n                tables = result.get(\"tables\", [])\n                results = [Data(data={\"tables\": tables, \"operation\": \"list_tables\"})]\n                self.status = results\n                return results\n            else:\n                error_msg = f\"API error: {result.get('message', 'Unknown error')}\"\n                error_data = Data(data={\"error\": error_msg})\n                self.status = error_data\n                return [error_data]\n                \n        except Exception as e:\n            error_data = Data(data={\"error\": f\"Request error: {str(e)}\"})\n            self.status = error_data\n            return [error_data]\n\n    def as_dataframe(self) -> DataFrame:\n        \"\"\"Convert the list tables results to a DataFrame.\n\n        Returns:\n            DataFrame: A DataFrame containing the tables information.\n        \"\"\"\n        data = self.list_tables()\n        if isinstance(data, list):\n            return DataFrame(data=[d.data for d in data])\n        return DataFrame(data=[data.data])\n"
              },
              "ip_address": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "IP Address",
                "dynamic": false,
                "info": "The IP address of your API server (e.g., '192.168.1.100')",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "ip_address",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "kb_name": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Knowledge Base Name",
                "dynamic": false,
                "info": "The name of the knowledge base",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "kb_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "kb_owner": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Knowledge Base Owner",
                "dynamic": false,
                "info": "The owner of the knowledge base",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "kb_owner",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "tools_metadata": {
                "_input_type": "ToolsInput",
                "advanced": false,
                "display_name": "Actions",
                "dynamic": false,
                "info": "Modify tool names and descriptions to help agents understand when to use each tool.",
                "is_list": true,
                "list_add_label": "Add More",
                "name": "tools_metadata",
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "tools",
                "value": [
                  {
                    "args": {
                      "kb_name": {
                        "default": "",
                        "description": "The name of the knowledge base",
                        "title": "Kb Name",
                        "type": "string"
                      },
                      "kb_owner": {
                        "default": "",
                        "description": "The owner of the knowledge base",
                        "title": "Kb Owner",
                        "type": "string"
                      }
                    },
                    "description": "ListTablesComponent. list_tables - List all tables from custom knowledge base API",
                    "display_description": "ListTablesComponent. list_tables - List all tables from custom knowledge base API",
                    "display_name": "list_tables",
                    "name": "list_tables",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "list_tables"
                    ]
                  },
                  {
                    "args": {
                      "kb_name": {
                        "default": "",
                        "description": "The name of the knowledge base",
                        "title": "Kb Name",
                        "type": "string"
                      },
                      "kb_owner": {
                        "default": "",
                        "description": "The owner of the knowledge base",
                        "title": "Kb Owner",
                        "type": "string"
                      }
                    },
                    "description": "ListTablesComponent. as_dataframe - List all tables from custom knowledge base API",
                    "display_description": "ListTablesComponent. as_dataframe - List all tables from custom knowledge base API",
                    "display_name": "as_dataframe",
                    "name": "as_dataframe",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "as_dataframe"
                    ]
                  }
                ]
              }
            },
            "tool_mode": true
          },
          "showNode": true,
          "type": "ListTablesComponent"
        },
        "dragging": false,
        "id": "CustomRetrievalComponent-XN3c0",
        "measured": {
          "height": 329,
          "width": 320
        },
        "position": {
          "x": 394.7945573094739,
          "y": -856.4257621099214
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "TextInput-fZXuR",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Get text inputs from the Playground.",
            "display_name": "Text Input",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value"
            ],
            "frozen": false,
            "icon": "type",
            "legacy": false,
            "lf_version": "1.4.2",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Message",
                "hidden": false,
                "method": "text_response",
                "name": "text",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.base.io.text import TextComponent\nfrom langflow.io import MultilineInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        return Message(\n            text=self.input_value,\n        )\n"
              },
              "input_value": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Text",
                "dynamic": false,
                "info": "Text to be passed as input.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "10.0.0.73"
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "TextInput"
        },
        "dragging": false,
        "id": "TextInput-fZXuR",
        "measured": {
          "height": 229,
          "width": 320
        },
        "position": {
          "x": -305.3634254653485,
          "y": -897.6162573902095
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "Agent-8A58C",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Define the agent's instructions, then enter a task to complete using tools.",
            "display_name": "Agent",
            "documentation": "",
            "edited": false,
            "field_order": [
              "agent_llm",
              "max_tokens",
              "model_kwargs",
              "json_mode",
              "model_name",
              "openai_api_base",
              "api_key",
              "temperature",
              "seed",
              "max_retries",
              "timeout",
              "system_prompt",
              "tools",
              "input_value",
              "handle_parsing_errors",
              "verbose",
              "max_iterations",
              "agent_description",
              "memory",
              "sender",
              "sender_name",
              "n_messages",
              "session_id",
              "order",
              "template",
              "add_current_date_tool"
            ],
            "frozen": false,
            "icon": "bot",
            "legacy": false,
            "lf_version": "1.4.2",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Response",
                "hidden": null,
                "method": "message_response",
                "name": "response",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "add_current_date_tool": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Current Date",
                "dynamic": false,
                "info": "If true, will add a tool to the agent that returns the current date.",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "name": "add_current_date_tool",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "agent_description": {
                "_input_type": "MultilineInput",
                "advanced": true,
                "copy_field": false,
                "display_name": "Agent Description [Deprecated]",
                "dynamic": false,
                "info": "The description of the agent. This is only used when in Tool Mode. Defaults to 'A helpful assistant with access to the following tools:' and tools are added dynamically. This feature is deprecated and will be removed in future versions.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "agent_description",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "A helpful assistant with access to the following tools:"
              },
              "agent_llm": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Language Model",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "LanguageModel"
                ],
                "name": "agent_llm",
                "options": [
                  "Amazon Bedrock",
                  "Anthropic",
                  "Azure OpenAI",
                  "Google Generative AI",
                  "Groq",
                  "NVIDIA",
                  "OpenAI",
                  "SambaNova",
                  "Custom"
                ],
                "options_metadata": [
                  {
                    "icon": "Amazon"
                  },
                  {
                    "icon": "Anthropic"
                  },
                  {
                    "icon": "Azure"
                  },
                  {
                    "icon": "GoogleGenerativeAI"
                  },
                  {
                    "icon": "Groq"
                  },
                  {
                    "icon": "NVIDIA"
                  },
                  {
                    "icon": "OpenAI"
                  },
                  {
                    "icon": "SambaNova"
                  },
                  {
                    "icon": "brain"
                  }
                ],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langchain_core.tools import StructuredTool\n\nfrom langflow.base.agents.agent import LCToolsAgentComponent\nfrom langflow.base.agents.events import ExceptionWithMessageError\nfrom langflow.base.models.model_input_constants import (\n    ALL_PROVIDER_FIELDS,\n    MODEL_DYNAMIC_UPDATE_FIELDS,\n    MODEL_PROVIDERS_DICT,\n    MODELS_METADATA,\n)\nfrom langflow.base.models.model_utils import get_model_name\nfrom langflow.components.helpers import CurrentDateComponent\nfrom langflow.components.helpers.memory import MemoryComponent\nfrom langflow.components.langchain_utilities.tool_calling import ToolCallingAgentComponent\nfrom langflow.custom.utils import update_component_build_config\nfrom langflow.io import BoolInput, DropdownInput, MultilineInput, Output\nfrom langflow.logging import logger\nfrom langflow.schema.dotdict import dotdict\nfrom langflow.schema.message import Message\n\n\ndef set_advanced_true(component_input):\n    component_input.advanced = True\n    return component_input\n\n\nclass AgentComponent(ToolCallingAgentComponent):\n    display_name: str = \"Agent\"\n    description: str = \"Define the agent's instructions, then enter a task to complete using tools.\"\n    icon = \"bot\"\n    beta = False\n    name = \"Agent\"\n\n    memory_inputs = [set_advanced_true(component_input) for component_input in MemoryComponent().inputs]\n\n    inputs = [\n        DropdownInput(\n            name=\"agent_llm\",\n            display_name=\"Model Provider\",\n            info=\"The provider of the language model that the agent will use to generate responses.\",\n            options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n            value=\"OpenAI\",\n            real_time_refresh=True,\n            input_types=[],\n            options_metadata=[MODELS_METADATA[key] for key in sorted(MODELS_METADATA.keys())] + [{\"icon\": \"brain\"}],\n        ),\n        *MODEL_PROVIDERS_DICT[\"OpenAI\"][\"inputs\"],\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"Agent Instructions\",\n            info=\"System Prompt: Initial instructions and context provided to guide the agent's behavior.\",\n            value=\"You are a helpful assistant that can use tools to answer questions and perform tasks.\",\n            advanced=False,\n        ),\n        *LCToolsAgentComponent._base_inputs,\n        *memory_inputs,\n        BoolInput(\n            name=\"add_current_date_tool\",\n            display_name=\"Current Date\",\n            advanced=True,\n            info=\"If true, will add a tool to the agent that returns the current date.\",\n            value=True,\n        ),\n    ]\n    outputs = [Output(name=\"response\", display_name=\"Response\", method=\"message_response\")]\n\n    async def message_response(self) -> Message:\n        try:\n            # Get LLM model and validate\n            llm_model, display_name = self.get_llm()\n            if llm_model is None:\n                msg = \"No language model selected. Please choose a model to proceed.\"\n                raise ValueError(msg)\n            self.model_name = get_model_name(llm_model, display_name=display_name)\n\n            # Get memory data\n            self.chat_history = await self.get_memory_data()\n\n            # Add current date tool if enabled\n            if self.add_current_date_tool:\n                if not isinstance(self.tools, list):  # type: ignore[has-type]\n                    self.tools = []\n                current_date_tool = (await CurrentDateComponent(**self.get_base_args()).to_toolkit()).pop(0)\n                if not isinstance(current_date_tool, StructuredTool):\n                    msg = \"CurrentDateComponent must be converted to a StructuredTool\"\n                    raise TypeError(msg)\n                self.tools.append(current_date_tool)\n\n            # Validate tools\n            if not self.tools:\n                msg = \"Tools are required to run the agent. Please add at least one tool.\"\n                raise ValueError(msg)\n\n            # Set up and run agent\n            self.set(\n                llm=llm_model,\n                tools=self.tools,\n                chat_history=self.chat_history,\n                input_value=self.input_value,\n                system_prompt=self.system_prompt,\n            )\n            agent = self.create_agent_runnable()\n            return await self.run_agent(agent)\n\n        except (ValueError, TypeError, KeyError) as e:\n            logger.error(f\"{type(e).__name__}: {e!s}\")\n            raise\n        except ExceptionWithMessageError as e:\n            logger.error(f\"ExceptionWithMessageError occurred: {e}\")\n            raise\n        except Exception as e:\n            logger.error(f\"Unexpected error: {e!s}\")\n            raise\n\n    async def get_memory_data(self):\n        memory_kwargs = {\n            component_input.name: getattr(self, f\"{component_input.name}\") for component_input in self.memory_inputs\n        }\n        # filter out empty values\n        memory_kwargs = {k: v for k, v in memory_kwargs.items() if v is not None}\n\n        return await MemoryComponent(**self.get_base_args()).set(**memory_kwargs).retrieve_messages()\n\n    def get_llm(self):\n        if not isinstance(self.agent_llm, str):\n            return self.agent_llm, None\n\n        try:\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if not provider_info:\n                msg = f\"Invalid model provider: {self.agent_llm}\"\n                raise ValueError(msg)\n\n            component_class = provider_info.get(\"component_class\")\n            display_name = component_class.display_name\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\", \"\")\n\n            return self._build_llm_model(component_class, inputs, prefix), display_name\n\n        except Exception as e:\n            logger.error(f\"Error building {self.agent_llm} language model: {e!s}\")\n            msg = f\"Failed to initialize language model: {e!s}\"\n            raise ValueError(msg) from e\n\n    def _build_llm_model(self, component, inputs, prefix=\"\"):\n        model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n        return component.set(**model_kwargs).build_model()\n\n    def set_component_params(self, component):\n        provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n        if provider_info:\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\")\n            model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n\n            return component.set(**model_kwargs)\n        return component\n\n    def delete_fields(self, build_config: dotdict, fields: dict | list[str]) -> None:\n        \"\"\"Delete specified fields from build_config.\"\"\"\n        for field in fields:\n            build_config.pop(field, None)\n\n    def update_input_types(self, build_config: dotdict) -> dotdict:\n        \"\"\"Update input types for all fields in build_config.\"\"\"\n        for key, value in build_config.items():\n            if isinstance(value, dict):\n                if value.get(\"input_types\") is None:\n                    build_config[key][\"input_types\"] = []\n            elif hasattr(value, \"input_types\") and value.input_types is None:\n                value.input_types = []\n        return build_config\n\n    async def update_build_config(\n        self, build_config: dotdict, field_value: str, field_name: str | None = None\n    ) -> dotdict:\n        # Iterate over all providers in the MODEL_PROVIDERS_DICT\n        # Existing logic for updating build_config\n        if field_name in (\"agent_llm\",):\n            build_config[\"agent_llm\"][\"value\"] = field_value\n            provider_info = MODEL_PROVIDERS_DICT.get(field_value)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call the component class's update_build_config method\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n\n            provider_configs: dict[str, tuple[dict, list[dict]]] = {\n                provider: (\n                    MODEL_PROVIDERS_DICT[provider][\"fields\"],\n                    [\n                        MODEL_PROVIDERS_DICT[other_provider][\"fields\"]\n                        for other_provider in MODEL_PROVIDERS_DICT\n                        if other_provider != provider\n                    ],\n                )\n                for provider in MODEL_PROVIDERS_DICT\n            }\n            if field_value in provider_configs:\n                fields_to_add, fields_to_delete = provider_configs[field_value]\n\n                # Delete fields from other providers\n                for fields in fields_to_delete:\n                    self.delete_fields(build_config, fields)\n\n                # Add provider-specific fields\n                if field_value == \"OpenAI\" and not any(field in build_config for field in fields_to_add):\n                    build_config.update(fields_to_add)\n                else:\n                    build_config.update(fields_to_add)\n                # Reset input types for agent_llm\n                build_config[\"agent_llm\"][\"input_types\"] = []\n            elif field_value == \"Custom\":\n                # Delete all provider fields\n                self.delete_fields(build_config, ALL_PROVIDER_FIELDS)\n                # Update with custom component\n                custom_component = DropdownInput(\n                    name=\"agent_llm\",\n                    display_name=\"Language Model\",\n                    options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n                    value=\"Custom\",\n                    real_time_refresh=True,\n                    input_types=[\"LanguageModel\"],\n                    options_metadata=[MODELS_METADATA[key] for key in sorted(MODELS_METADATA.keys())]\n                    + [{\"icon\": \"brain\"}],\n                )\n                build_config.update({\"agent_llm\": custom_component.to_dict()})\n            # Update input types for all fields\n            build_config = self.update_input_types(build_config)\n\n            # Validate required keys\n            default_keys = [\n                \"code\",\n                \"_type\",\n                \"agent_llm\",\n                \"tools\",\n                \"input_value\",\n                \"add_current_date_tool\",\n                \"system_prompt\",\n                \"agent_description\",\n                \"max_iterations\",\n                \"handle_parsing_errors\",\n                \"verbose\",\n            ]\n            missing_keys = [key for key in default_keys if key not in build_config]\n            if missing_keys:\n                msg = f\"Missing required keys in build_config: {missing_keys}\"\n                raise ValueError(msg)\n        if (\n            isinstance(self.agent_llm, str)\n            and self.agent_llm in MODEL_PROVIDERS_DICT\n            and field_name in MODEL_DYNAMIC_UPDATE_FIELDS\n        ):\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                component_class = self.set_component_params(component_class)\n                prefix = provider_info.get(\"prefix\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call each component class's update_build_config method\n                    # remove the prefix from the field_name\n                    if isinstance(field_name, str) and isinstance(prefix, str):\n                        field_name = field_name.replace(prefix, \"\")\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n        return dotdict({k: v.to_dict() if hasattr(v, \"to_dict\") else v for k, v in build_config.items()})\n"
              },
              "handle_parsing_errors": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Handle Parse Errors",
                "dynamic": false,
                "info": "Should the Agent fix errors when reading user input for better processing?",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "name": "handle_parsing_errors",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "input_value": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Input",
                "dynamic": false,
                "info": "The input provided by the user for the agent to process.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "max_iterations": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Iterations",
                "dynamic": false,
                "info": "The maximum number of attempts the agent can make to complete its task before it stops.",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "name": "max_iterations",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 15
              },
              "memory": {
                "_input_type": "HandleInput",
                "advanced": true,
                "display_name": "External Memory",
                "dynamic": false,
                "info": "Retrieve messages from an external memory. If empty, it will use the Langflow tables.",
                "input_types": [
                  "Memory"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "memory",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "n_messages": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Number of Messages",
                "dynamic": false,
                "info": "Number of messages to retrieve.",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "name": "n_messages",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 100
              },
              "order": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Order",
                "dynamic": false,
                "info": "Order of the messages.",
                "input_types": [],
                "name": "order",
                "options": [
                  "Ascending",
                  "Descending"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Ascending"
              },
              "sender": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Sender Type",
                "dynamic": false,
                "info": "Filter by sender type.",
                "input_types": [],
                "name": "sender",
                "options": [
                  "Machine",
                  "User",
                  "Machine and User"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Machine and User"
              },
              "sender_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sender Name",
                "dynamic": false,
                "info": "Filter by sender name.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "session_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "system_prompt": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Agent Instructions",
                "dynamic": false,
                "info": "System Prompt: Initial instructions and context provided to guide the agent's behavior.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "system_prompt",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "You are a helpful assistant that can use tools to answer questions and perform tasks.\nUser will give you two params: kb_owner and kb_name, you need to `list_tables` first then is `search`.\n\nlist_tables input scheme:\n{\n  \"kb_owner\": \"admin\",\n  \"kb_name\": \"test\"\n}\n---\n{\n\"file_name\": \"國泰金控員工國外出差要點.pdf\", # var\n\"status\": \"success\",\n\"texts_table_name\": \"file_20250609033811_texts\", # var\n\"images_table_name\": \"\", # var\n\"tables_table_name\": \"file_20250609033811_tables\" # var\n}\nsearch input scheme:\n{\n  \"kb_name\": \"test\",\n  \"search_query\": \"here should be user input\", # var\n  \"selected_tables\": \"[[\\\"file_20250609033811_texts\\\", \\\"\\\", \\\"file_20250609033811_tables\\\"]]\" # each list must contain three string even is not use, order is texts, images, tables.\n}"
              },
              "template": {
                "_input_type": "MultilineInput",
                "advanced": true,
                "copy_field": false,
                "display_name": "Template",
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "{sender_name}: {text}"
              },
              "tools": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Tools",
                "dynamic": false,
                "info": "These are the tools that the agent can use to help with tasks.",
                "input_types": [
                  "Tool"
                ],
                "list": true,
                "list_add_label": "Add More",
                "name": "tools",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "verbose": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Verbose",
                "dynamic": false,
                "info": "",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "name": "verbose",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "Agent"
        },
        "dragging": false,
        "id": "Agent-8A58C",
        "measured": {
          "height": 457,
          "width": 320
        },
        "position": {
          "x": 799.8207222210299,
          "y": -404.8316910716114
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "CustomComponent-PPQGp",
          "node": {
            "base_classes": [
              "LanguageModel",
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Runs a language model given a specified provider. ",
            "display_name": "Language Model",
            "documentation": "",
            "edited": true,
            "field_order": [
              "provider",
              "model_name",
              "api_key",
              "input_value",
              "system_message",
              "stream",
              "temperature"
            ],
            "frozen": false,
            "icon": "brain-circuit",
            "legacy": false,
            "lf_version": "1.4.2",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Message",
                "hidden": null,
                "method": "text_response",
                "name": "text_output",
                "options": null,
                "required_inputs": [],
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Language Model",
                "hidden": null,
                "method": "build_model",
                "name": "model_output",
                "options": null,
                "required_inputs": [],
                "selected": "LanguageModel",
                "tool_mode": true,
                "types": [
                  "LanguageModel"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "priority": 0,
            "template": {
              "_type": "Component",
              "api_key": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "OpenRouter API Key",
                "dynamic": false,
                "info": "Model Provider API key",
                "input_types": [],
                "load_from_db": false,
                "name": "api_key",
                "password": true,
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from typing import Any\nimport requests\n\nfrom langchain_anthropic import ChatAnthropic\nfrom langchain_openai import ChatOpenAI\n\nfrom langflow.base.models.anthropic_constants import ANTHROPIC_MODELS\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import OPENAI_MODEL_NAMES\nfrom langflow.field_typing import LanguageModel\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.inputs.inputs import BoolInput\nfrom langflow.io import DropdownInput, MessageTextInput, SecretStrInput, SliderInput\nfrom langflow.schema.dotdict import dotdict\n\n# Fetch OpenRouter models\ndef get_openrouter_models():\n    try:\n        response = requests.get(\"https://openrouter.ai/api/v1/models\")\n        models_data = response.json()\n        return [model[\"id\"] for model in models_data.get(\"data\", [])]\n    except:\n        # Fallback to some common OpenRouter models if API call fails\n        return [\n            \"anthropic/claude-3-sonnet\",\n            \"anthropic/claude-3-haiku\",\n            \"openai/gpt-4\",\n            \"openai/gpt-3.5-turbo\",\n            \"meta-llama/llama-2-70b-chat\"\n        ]\n\nOPENROUTER_MODEL_NAMES = get_openrouter_models()\n\n\nclass LanguageModelComponent(LCModelComponent):\n    display_name = \"Language Model\"\n    description = \"Runs a language model given a specified provider. \"\n    icon = \"brain-circuit\"\n    category = \"models\"\n    priority = 0  # Set priority to 0 to make it appear first\n\n    inputs = [\n        DropdownInput(\n            name=\"provider\",\n            display_name=\"Model Provider\",\n            options=[\"OpenAI\", \"Anthropic\", \"OpenRouter\"],\n            value=\"OpenAI\",\n            info=\"Select the model provider\",\n            real_time_refresh=True,\n            options_metadata=[{\"icon\": \"OpenAI\"}, {\"icon\": \"Anthropic\"}, {\"icon\": \"OpenRouter\"}],\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            options=OPENAI_MODEL_NAMES,\n            value=OPENAI_MODEL_NAMES[0],\n            info=\"Select the model to use\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"Model Provider API key\",\n            required=False,\n            show=True,\n            real_time_refresh=True,\n        ),\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Input\",\n            info=\"The input text to send to the model\",\n        ),\n        MessageTextInput(\n            name=\"system_message\",\n            display_name=\"System Message\",\n            info=\"A system message that helps set the behavior of the assistant\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"stream\",\n            display_name=\"Stream\",\n            info=\"Whether to stream the response\",\n            value=False,\n            advanced=True,\n        ),\n        SliderInput(\n            name=\"temperature\",\n            display_name=\"Temperature\",\n            value=0.1,\n            range_spec=RangeSpec(min=0, max=1, step=0.01),\n            show=True,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:\n        provider = self.provider\n        model_name = self.model_name\n        temperature = self.temperature\n        stream = self.stream\n\n        if provider == \"OpenAI\":\n            if not self.api_key:\n                msg = \"OpenAI API key is required when using OpenAI provider\"\n                raise ValueError(msg)\n            return ChatOpenAI(\n                model_name=model_name,\n                temperature=temperature,\n                streaming=stream,\n                openai_api_key=self.api_key,\n            )\n        if provider == \"Anthropic\":\n            if not self.api_key:\n                msg = \"Anthropic API key is required when using Anthropic provider\"\n                raise ValueError(msg)\n            return ChatAnthropic(\n                model=model_name,\n                temperature=temperature,\n                streaming=stream,\n                anthropic_api_key=self.api_key,\n            )\n        if provider == \"OpenRouter\":\n            if not self.api_key:\n                msg = \"OpenRouter API key is required when using OpenRouter provider\"\n                raise ValueError(msg)\n            return ChatOpenAI(\n                model_name=model_name,\n                temperature=temperature,\n                streaming=stream,\n                openai_api_key=self.api_key,\n                base_url=\"https://openrouter.ai/api/v1\",\n            )\n        msg = f\"Unknown provider: {provider}\"\n        raise ValueError(msg)\n\n    def update_build_config(self, build_config: dotdict, field_value: Any, field_name: str | None = None) -> dotdict:\n        if field_name == \"provider\":\n            if field_value == \"OpenAI\":\n                build_config[\"model_name\"][\"options\"] = OPENAI_MODEL_NAMES\n                build_config[\"model_name\"][\"value\"] = OPENAI_MODEL_NAMES[0]\n                build_config[\"api_key\"][\"display_name\"] = \"OpenAI API Key\"\n            elif field_value == \"Anthropic\":\n                build_config[\"model_name\"][\"options\"] = ANTHROPIC_MODELS\n                build_config[\"model_name\"][\"value\"] = ANTHROPIC_MODELS[0]\n                build_config[\"api_key\"][\"display_name\"] = \"Anthropic API Key\"\n            elif field_value == \"OpenRouter\":\n                build_config[\"model_name\"][\"options\"] = OPENROUTER_MODEL_NAMES\n                build_config[\"model_name\"][\"value\"] = OPENROUTER_MODEL_NAMES[0]\n                build_config[\"api_key\"][\"display_name\"] = \"OpenRouter API Key\"\n        return build_config\n"
              },
              "input_value": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Input",
                "dynamic": false,
                "info": "The input text to send to the model",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Hello, World!"
              },
              "model_name": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Model Name",
                "dynamic": false,
                "info": "Select the model to use",
                "name": "model_name",
                "options": [
                  "google/gemini-2.5-pro-preview",
                  "sentientagi/dobby-mini-unhinged-plus-llama-3.1-8b",
                  "deepseek/deepseek-r1-distill-qwen-7b",
                  "deepseek/deepseek-r1-0528-qwen3-8b:free",
                  "deepseek/deepseek-r1-0528-qwen3-8b",
                  "google/gemma-2b-it",
                  "deepseek/deepseek-r1-0528:free",
                  "deepseek/deepseek-r1-0528",
                  "sarvamai/sarvam-m:free",
                  "thedrummer/valkyrie-49b-v1",
                  "anthropic/claude-opus-4",
                  "anthropic/claude-sonnet-4",
                  "mistralai/devstral-small:free",
                  "mistralai/devstral-small",
                  "google/gemma-3n-e4b-it:free",
                  "google/gemini-2.5-flash-preview-05-20",
                  "google/gemini-2.5-flash-preview-05-20:thinking",
                  "openai/codex-mini",
                  "meta-llama/llama-3.3-8b-instruct:free",
                  "nousresearch/deephermes-3-mistral-24b-preview:free",
                  "mistralai/mistral-medium-3",
                  "google/gemini-2.5-pro-preview-05-06",
                  "arcee-ai/caller-large",
                  "arcee-ai/spotlight",
                  "arcee-ai/maestro-reasoning",
                  "arcee-ai/virtuoso-large",
                  "arcee-ai/coder-large",
                  "arcee-ai/virtuoso-medium-v2",
                  "arcee-ai/arcee-blitz",
                  "microsoft/phi-4-reasoning-plus:free",
                  "microsoft/phi-4-reasoning-plus",
                  "microsoft/phi-4-reasoning:free",
                  "inception/mercury-coder-small-beta",
                  "opengvlab/internvl3-14b:free",
                  "opengvlab/internvl3-2b:free",
                  "deepseek/deepseek-prover-v2:free",
                  "deepseek/deepseek-prover-v2",
                  "meta-llama/llama-guard-4-12b",
                  "qwen/qwen3-30b-a3b:free",
                  "qwen/qwen3-30b-a3b",
                  "qwen/qwen3-8b:free",
                  "qwen/qwen3-8b",
                  "qwen/qwen3-14b:free",
                  "qwen/qwen3-14b",
                  "qwen/qwen3-32b:free",
                  "qwen/qwen3-32b",
                  "qwen/qwen3-235b-a22b:free",
                  "qwen/qwen3-235b-a22b",
                  "tngtech/deepseek-r1t-chimera:free",
                  "thudm/glm-z1-rumination-32b",
                  "microsoft/mai-ds-r1:free",
                  "thudm/glm-z1-32b:free",
                  "thudm/glm-z1-32b",
                  "thudm/glm-4-32b:free",
                  "thudm/glm-4-32b",
                  "google/gemini-2.5-flash-preview",
                  "google/gemini-2.5-flash-preview:thinking",
                  "openai/o4-mini-high",
                  "openai/o3",
                  "openai/o4-mini",
                  "shisa-ai/shisa-v2-llama3.3-70b:free",
                  "openai/gpt-4.1",
                  "openai/gpt-4.1-mini",
                  "openai/gpt-4.1-nano",
                  "eleutherai/llemma_7b",
                  "alfredpros/codellama-7b-instruct-solidity",
                  "arliai/qwq-32b-arliai-rpr-v1:free",
                  "agentica-org/deepcoder-14b-preview:free",
                  "moonshotai/kimi-vl-a3b-thinking:free",
                  "x-ai/grok-3-mini-beta",
                  "x-ai/grok-3-beta",
                  "nvidia/llama-3.3-nemotron-super-49b-v1:free",
                  "nvidia/llama-3.3-nemotron-super-49b-v1",
                  "nvidia/llama-3.1-nemotron-ultra-253b-v1:free",
                  "nvidia/llama-3.1-nemotron-ultra-253b-v1",
                  "meta-llama/llama-4-maverick:free",
                  "meta-llama/llama-4-maverick",
                  "meta-llama/llama-4-scout:free",
                  "meta-llama/llama-4-scout",
                  "all-hands/openhands-lm-32b-v0.1",
                  "deepseek/deepseek-v3-base:free",
                  "scb10x/llama3.1-typhoon2-70b-instruct",
                  "qwen/qwen2.5-vl-3b-instruct:free",
                  "google/gemini-2.5-pro-exp-03-25",
                  "qwen/qwen2.5-vl-32b-instruct:free",
                  "qwen/qwen2.5-vl-32b-instruct",
                  "deepseek/deepseek-chat-v3-0324:free",
                  "deepseek/deepseek-chat-v3-0324",
                  "featherless/qwerky-72b:free",
                  "openai/o1-pro",
                  "mistralai/mistral-small-3.1-24b-instruct:free",
                  "mistralai/mistral-small-3.1-24b-instruct",
                  "open-r1/olympiccoder-32b:free",
                  "google/gemma-3-1b-it:free",
                  "google/gemma-3-4b-it:free",
                  "google/gemma-3-4b-it",
                  "ai21/jamba-1.6-large",
                  "ai21/jamba-1.6-mini",
                  "google/gemma-3-12b-it:free",
                  "google/gemma-3-12b-it",
                  "cohere/command-a",
                  "openai/gpt-4o-mini-search-preview",
                  "openai/gpt-4o-search-preview",
                  "rekaai/reka-flash-3:free",
                  "google/gemma-3-27b-it:free",
                  "google/gemma-3-27b-it",
                  "thedrummer/anubis-pro-105b-v1",
                  "thedrummer/skyfall-36b-v2",
                  "microsoft/phi-4-multimodal-instruct",
                  "perplexity/sonar-reasoning-pro",
                  "perplexity/sonar-pro",
                  "perplexity/sonar-deep-research",
                  "deepseek/deepseek-r1-zero:free",
                  "qwen/qwq-32b:free",
                  "qwen/qwq-32b",
                  "moonshotai/moonlight-16b-a3b-instruct:free",
                  "nousresearch/deephermes-3-llama-3-8b-preview:free",
                  "openai/gpt-4.5-preview",
                  "google/gemini-2.0-flash-lite-001",
                  "anthropic/claude-3.7-sonnet",
                  "anthropic/claude-3.7-sonnet:beta",
                  "anthropic/claude-3.7-sonnet:thinking",
                  "perplexity/r1-1776",
                  "mistralai/mistral-saba",
                  "cognitivecomputations/dolphin3.0-r1-mistral-24b:free",
                  "cognitivecomputations/dolphin3.0-mistral-24b:free",
                  "meta-llama/llama-guard-3-8b",
                  "openai/o3-mini-high",
                  "deepseek/deepseek-r1-distill-llama-8b",
                  "google/gemini-2.0-flash-001",
                  "qwen/qwen-vl-plus",
                  "aion-labs/aion-1.0",
                  "aion-labs/aion-1.0-mini",
                  "aion-labs/aion-rp-llama-3.1-8b",
                  "qwen/qwen-vl-max",
                  "qwen/qwen-turbo",
                  "qwen/qwen2.5-vl-72b-instruct:free",
                  "qwen/qwen2.5-vl-72b-instruct",
                  "qwen/qwen-plus",
                  "qwen/qwen-max",
                  "openai/o3-mini",
                  "deepseek/deepseek-r1-distill-qwen-1.5b",
                  "mistralai/mistral-small-24b-instruct-2501:free",
                  "mistralai/mistral-small-24b-instruct-2501",
                  "deepseek/deepseek-r1-distill-qwen-32b:free",
                  "deepseek/deepseek-r1-distill-qwen-32b",
                  "deepseek/deepseek-r1-distill-qwen-14b:free",
                  "deepseek/deepseek-r1-distill-qwen-14b",
                  "perplexity/sonar-reasoning",
                  "perplexity/sonar",
                  "liquid/lfm-7b",
                  "liquid/lfm-3b",
                  "deepseek/deepseek-r1-distill-llama-70b:free",
                  "deepseek/deepseek-r1-distill-llama-70b",
                  "deepseek/deepseek-r1:free",
                  "deepseek/deepseek-r1",
                  "minimax/minimax-01",
                  "mistralai/codestral-2501",
                  "microsoft/phi-4",
                  "deepseek/deepseek-chat:free",
                  "deepseek/deepseek-chat",
                  "sao10k/l3.3-euryale-70b",
                  "openai/o1",
                  "eva-unit-01/eva-llama-3.33-70b",
                  "x-ai/grok-2-vision-1212",
                  "x-ai/grok-2-1212",
                  "cohere/command-r7b-12-2024",
                  "google/gemini-2.0-flash-exp:free",
                  "meta-llama/llama-3.3-70b-instruct:free",
                  "meta-llama/llama-3.3-70b-instruct",
                  "amazon/nova-lite-v1",
                  "amazon/nova-micro-v1",
                  "amazon/nova-pro-v1",
                  "qwen/qwq-32b-preview",
                  "eva-unit-01/eva-qwen-2.5-72b",
                  "openai/gpt-4o-2024-11-20",
                  "mistralai/mistral-large-2411",
                  "mistralai/mistral-large-2407",
                  "mistralai/pixtral-large-2411",
                  "x-ai/grok-vision-beta",
                  "infermatic/mn-inferor-12b",
                  "qwen/qwen-2.5-coder-32b-instruct:free",
                  "qwen/qwen-2.5-coder-32b-instruct",
                  "raifle/sorcererlm-8x22b",
                  "eva-unit-01/eva-qwen-2.5-32b",
                  "thedrummer/unslopnemo-12b",
                  "anthropic/claude-3.5-haiku:beta",
                  "anthropic/claude-3.5-haiku",
                  "anthropic/claude-3.5-haiku-20241022:beta",
                  "anthropic/claude-3.5-haiku-20241022",
                  "neversleep/llama-3.1-lumimaid-70b",
                  "anthracite-org/magnum-v4-72b",
                  "anthropic/claude-3.5-sonnet:beta",
                  "anthropic/claude-3.5-sonnet",
                  "x-ai/grok-beta",
                  "mistralai/ministral-8b",
                  "mistralai/ministral-3b",
                  "qwen/qwen-2.5-7b-instruct:free",
                  "qwen/qwen-2.5-7b-instruct",
                  "nvidia/llama-3.1-nemotron-70b-instruct",
                  "inflection/inflection-3-productivity",
                  "inflection/inflection-3-pi",
                  "google/gemini-flash-1.5-8b",
                  "thedrummer/rocinante-12b",
                  "anthracite-org/magnum-v2-72b",
                  "liquid/lfm-40b",
                  "meta-llama/llama-3.2-3b-instruct:free",
                  "meta-llama/llama-3.2-3b-instruct",
                  "meta-llama/llama-3.2-1b-instruct:free",
                  "meta-llama/llama-3.2-1b-instruct",
                  "meta-llama/llama-3.2-90b-vision-instruct",
                  "meta-llama/llama-3.2-11b-vision-instruct:free",
                  "meta-llama/llama-3.2-11b-vision-instruct",
                  "qwen/qwen-2.5-72b-instruct:free",
                  "qwen/qwen-2.5-72b-instruct",
                  "neversleep/llama-3.1-lumimaid-8b",
                  "openai/o1-preview",
                  "openai/o1-preview-2024-09-12",
                  "openai/o1-mini",
                  "openai/o1-mini-2024-09-12",
                  "mistralai/pixtral-12b",
                  "cohere/command-r-plus-08-2024",
                  "cohere/command-r-08-2024",
                  "qwen/qwen-2.5-vl-7b-instruct:free",
                  "qwen/qwen-2.5-vl-7b-instruct",
                  "sao10k/l3.1-euryale-70b",
                  "microsoft/phi-3.5-mini-128k-instruct",
                  "nousresearch/hermes-3-llama-3.1-70b",
                  "nousresearch/hermes-3-llama-3.1-405b",
                  "openai/chatgpt-4o-latest",
                  "sao10k/l3-lunaris-8b",
                  "aetherwiing/mn-starcannon-12b",
                  "openai/gpt-4o-2024-08-06",
                  "meta-llama/llama-3.1-405b:free",
                  "meta-llama/llama-3.1-405b",
                  "nothingiisreal/mn-celeste-12b",
                  "perplexity/llama-3.1-sonar-small-128k-online",
                  "perplexity/llama-3.1-sonar-large-128k-online",
                  "meta-llama/llama-3.1-8b-instruct:free",
                  "meta-llama/llama-3.1-8b-instruct",
                  "meta-llama/llama-3.1-405b-instruct",
                  "meta-llama/llama-3.1-70b-instruct",
                  "mistralai/mistral-nemo:free",
                  "mistralai/mistral-nemo",
                  "openai/gpt-4o-mini",
                  "openai/gpt-4o-mini-2024-07-18",
                  "google/gemma-2-27b-it",
                  "alpindale/magnum-72b",
                  "google/gemma-2-9b-it:free",
                  "google/gemma-2-9b-it",
                  "01-ai/yi-large",
                  "anthropic/claude-3.5-sonnet-20240620:beta",
                  "anthropic/claude-3.5-sonnet-20240620",
                  "sao10k/l3-euryale-70b",
                  "cognitivecomputations/dolphin-mixtral-8x22b",
                  "qwen/qwen-2-72b-instruct",
                  "mistralai/mistral-7b-instruct:free",
                  "mistralai/mistral-7b-instruct",
                  "nousresearch/hermes-2-pro-llama-3-8b",
                  "mistralai/mistral-7b-instruct-v0.3",
                  "microsoft/phi-3-mini-128k-instruct",
                  "microsoft/phi-3-medium-128k-instruct",
                  "neversleep/llama-3-lumimaid-70b",
                  "google/gemini-flash-1.5",
                  "openai/gpt-4o",
                  "openai/gpt-4o:extended",
                  "meta-llama/llama-guard-2-8b",
                  "openai/gpt-4o-2024-05-13",
                  "neversleep/llama-3-lumimaid-8b",
                  "sao10k/fimbulvetr-11b-v2",
                  "meta-llama/llama-3-8b-instruct",
                  "meta-llama/llama-3-70b-instruct",
                  "mistralai/mixtral-8x22b-instruct",
                  "microsoft/wizardlm-2-8x22b",
                  "google/gemini-pro-1.5",
                  "openai/gpt-4-turbo",
                  "cohere/command-r-plus",
                  "cohere/command-r-plus-04-2024",
                  "sophosympatheia/midnight-rose-70b",
                  "cohere/command",
                  "cohere/command-r",
                  "anthropic/claude-3-haiku:beta",
                  "anthropic/claude-3-haiku",
                  "anthropic/claude-3-opus:beta",
                  "anthropic/claude-3-opus",
                  "anthropic/claude-3-sonnet:beta",
                  "anthropic/claude-3-sonnet",
                  "cohere/command-r-03-2024",
                  "mistralai/mistral-large",
                  "openai/gpt-3.5-turbo-0613",
                  "openai/gpt-4-turbo-preview",
                  "nousresearch/nous-hermes-2-mixtral-8x7b-dpo",
                  "mistralai/mistral-medium",
                  "mistralai/mistral-small",
                  "mistralai/mistral-tiny",
                  "mistralai/mistral-7b-instruct-v0.2",
                  "mistralai/mixtral-8x7b-instruct",
                  "neversleep/noromaid-20b",
                  "anthropic/claude-2.1:beta",
                  "anthropic/claude-2.1",
                  "anthropic/claude-2:beta",
                  "anthropic/claude-2",
                  "undi95/toppy-m-7b",
                  "alpindale/goliath-120b",
                  "openrouter/auto",
                  "openai/gpt-3.5-turbo-1106",
                  "openai/gpt-4-1106-preview",
                  "openai/gpt-3.5-turbo-instruct",
                  "mistralai/mistral-7b-instruct-v0.1",
                  "pygmalionai/mythalion-13b",
                  "openai/gpt-3.5-turbo-16k",
                  "mancer/weaver",
                  "anthropic/claude-2.0:beta",
                  "anthropic/claude-2.0",
                  "undi95/remm-slerp-l2-13b",
                  "gryphe/mythomax-l2-13b",
                  "meta-llama/llama-2-70b-chat",
                  "openai/gpt-3.5-turbo",
                  "openai/gpt-3.5-turbo-0125",
                  "openai/gpt-4",
                  "openai/gpt-4-0314"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "google/gemini-2.5-flash-preview-05-20"
              },
              "provider": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Model Provider",
                "dynamic": false,
                "info": "Select the model provider",
                "name": "provider",
                "options": [
                  "OpenAI",
                  "Anthropic",
                  "OpenRouter"
                ],
                "options_metadata": [
                  {
                    "icon": "OpenAI"
                  },
                  {
                    "icon": "Anthropic"
                  },
                  {
                    "icon": "OpenRouter"
                  }
                ],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "OpenRouter"
              },
              "stream": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Stream",
                "dynamic": false,
                "info": "Whether to stream the response",
                "list": false,
                "list_add_label": "Add More",
                "name": "stream",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "system_message": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "System Message",
                "dynamic": false,
                "info": "A system message that helps set the behavior of the assistant",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "system_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "temperature": {
                "_input_type": "SliderInput",
                "advanced": false,
                "display_name": "Temperature",
                "dynamic": false,
                "info": "",
                "max_label": "",
                "max_label_icon": "",
                "min_label": "",
                "min_label_icon": "",
                "name": "temperature",
                "placeholder": "",
                "range_spec": {
                  "max": 1,
                  "min": 0,
                  "step": 0.01,
                  "step_type": "float"
                },
                "required": false,
                "show": true,
                "slider_buttons": false,
                "slider_buttons_options": [],
                "slider_input": false,
                "title_case": false,
                "tool_mode": false,
                "type": "slider",
                "value": 0
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "LanguageModelComponent"
        },
        "dragging": false,
        "id": "CustomComponent-PPQGp",
        "measured": {
          "height": 631,
          "width": 320
        },
        "position": {
          "x": 396.89977053989526,
          "y": -1504.9371397983741
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "RunFlow-1MCrE",
          "node": {
            "base_classes": [
              "Data",
              "DataFrame",
              "Message"
            ],
            "beta": true,
            "category": "logic",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Creates a tool component from a Flow that takes all its inputs and runs it.  \n **Select a Flow to use the tool mode**",
            "display_name": "Run Flow",
            "documentation": "",
            "edited": false,
            "field_order": [
              "flow_name_selected",
              "session_id"
            ],
            "frozen": false,
            "icon": "Workflow",
            "key": "RunFlow",
            "legacy": false,
            "lf_version": "1.4.2",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Toolset",
                "hidden": null,
                "method": "to_toolkit",
                "name": "component_as_tool",
                "options": null,
                "required_inputs": null,
                "selected": "Tool",
                "tool_mode": true,
                "types": [
                  "Tool"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "score": 0.10272033187433852,
            "template": {
              "ChatInput-evxRL~background_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Chat Input - Background Color",
                "dynamic": false,
                "info": "The background color of the icon.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "ChatInput-evxRL~background_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "ChatInput-evxRL~chat_icon": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Chat Input - Icon",
                "dynamic": false,
                "info": "The icon of the message.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "ChatInput-evxRL~chat_icon",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "ChatInput-evxRL~files": {
                "_input_type": "FileInput",
                "advanced": true,
                "display_name": "Chat Input - Files",
                "dynamic": false,
                "fileTypes": [
                  "txt",
                  "md",
                  "mdx",
                  "csv",
                  "json",
                  "yaml",
                  "yml",
                  "xml",
                  "html",
                  "htm",
                  "pdf",
                  "docx",
                  "py",
                  "sh",
                  "sql",
                  "js",
                  "ts",
                  "tsx",
                  "jpg",
                  "jpeg",
                  "png",
                  "bmp",
                  "image"
                ],
                "file_path": "",
                "info": "Files to be sent with the message.",
                "list": true,
                "list_add_label": "Add More",
                "name": "ChatInput-evxRL~files",
                "placeholder": "",
                "required": false,
                "show": true,
                "temp_file": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "file",
                "value": ""
              },
              "ChatInput-evxRL~input_value": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Chat Input - Text",
                "dynamic": false,
                "info": "Message to be passed as input.",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "ChatInput-evxRL~input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "ChatInput-evxRL~sender": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Chat Input - Sender Type",
                "dynamic": false,
                "info": "Type of sender.",
                "name": "ChatInput-evxRL~sender",
                "options": [
                  "Machine",
                  "User"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "User"
              },
              "ChatInput-evxRL~sender_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Chat Input - Sender Name",
                "dynamic": false,
                "info": "Name of the sender.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "ChatInput-evxRL~sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "User"
              },
              "ChatInput-evxRL~session_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Chat Input - Session ID",
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "ChatInput-evxRL~session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "ChatInput-evxRL~should_store_message": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Chat Input - Store Messages",
                "dynamic": false,
                "info": "Store the message in the history.",
                "list": false,
                "list_add_label": "Add More",
                "name": "ChatInput-evxRL~should_store_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "ChatInput-evxRL~text_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Chat Input - Text Color",
                "dynamic": false,
                "info": "The text color of the name",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "ChatInput-evxRL~text_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from typing import Any\n\nfrom loguru import logger\n\nfrom langflow.base.tools.run_flow import RunFlowBaseComponent\nfrom langflow.helpers.flow import run_flow\nfrom langflow.schema import dotdict\n\n\nclass RunFlowComponent(RunFlowBaseComponent):\n    display_name = \"Run Flow\"\n    description = (\n        \"Creates a tool component from a Flow that takes all its inputs and runs it. \"\n        \" \\n **Select a Flow to use the tool mode**\"\n    )\n    beta = True\n    name = \"RunFlow\"\n    icon = \"Workflow\"\n\n    inputs = RunFlowBaseComponent._base_inputs\n    outputs = RunFlowBaseComponent._base_outputs\n\n    async def update_build_config(self, build_config: dotdict, field_value: Any, field_name: str | None = None):\n        if field_name == \"flow_name_selected\":\n            build_config[\"flow_name_selected\"][\"options\"] = await self.get_flow_names()\n            missing_keys = [key for key in self.default_keys if key not in build_config]\n            if missing_keys:\n                msg = f\"Missing required keys in build_config: {missing_keys}\"\n                raise ValueError(msg)\n            if field_value is not None:\n                try:\n                    graph = await self.get_graph(field_value)\n                    build_config = self.update_build_config_from_graph(build_config, graph)\n                except Exception as e:\n                    msg = f\"Error building graph for flow {field_value}\"\n                    logger.exception(msg)\n                    raise RuntimeError(msg) from e\n        return build_config\n\n    async def run_flow_with_tweaks(self):\n        tweaks: dict = {}\n\n        flow_name_selected = self._attributes.get(\"flow_name_selected\")\n        parsed_flow_tweak_data = self._attributes.get(\"flow_tweak_data\", {})\n        if not isinstance(parsed_flow_tweak_data, dict):\n            parsed_flow_tweak_data = parsed_flow_tweak_data.dict()\n\n        if parsed_flow_tweak_data != {}:\n            for field in parsed_flow_tweak_data:\n                if \"~\" in field:\n                    [node, name] = field.split(\"~\")\n                    if node not in tweaks:\n                        tweaks[node] = {}\n                    tweaks[node][name] = parsed_flow_tweak_data[field]\n        else:\n            for field in self._attributes:\n                if field not in self.default_keys and \"~\" in field:\n                    [node, name] = field.split(\"~\")\n                    if node not in tweaks:\n                        tweaks[node] = {}\n                    tweaks[node][name] = self._attributes[field]\n\n        return await run_flow(\n            inputs=None,\n            output_type=\"all\",\n            flow_id=None,\n            flow_name=flow_name_selected,\n            tweaks=tweaks,\n            user_id=str(self.user_id),\n            session_id=self.graph.session_id or self.session_id,\n        )\n"
              },
              "flow_name_selected": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Flow Name",
                "dynamic": false,
                "info": "The name of the flow to run.",
                "name": "flow_name_selected",
                "options": [
                  "List files",
                  "Guardrail",
                  "Retriever"
                ],
                "options_metadata": [],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Guardrail"
              },
              "session_id": {
                "_input_type": "MessageInput",
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID to run the flow in.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": {
                  "data": {
                    "category": "message",
                    "content_blocks": [],
                    "duration": null,
                    "edit": false,
                    "error": false,
                    "files": [],
                    "flow_id": null,
                    "properties": {
                      "allow_markdown": false,
                      "edited": false,
                      "source": {
                        "display_name": null,
                        "id": null,
                        "source": null
                      },
                      "state": "complete",
                      "targets": []
                    },
                    "sender": null,
                    "sender_name": null,
                    "session_id": "",
                    "text": "",
                    "timestamp": "2025-06-11 00:57:36 UTC"
                  },
                  "default_value": "",
                  "text_key": "text"
                }
              },
              "tools_metadata": {
                "_input_type": "ToolsInput",
                "advanced": false,
                "display_name": "Actions",
                "dynamic": false,
                "info": "Modify tool names and descriptions to help agents understand when to use each tool.",
                "is_list": true,
                "list_add_label": "Add More",
                "name": "tools_metadata",
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "tools",
                "value": [
                  {
                    "args": {
                      "flow_tweak_data": {
                        "$ref": "#/$defs/InnerModel"
                      }
                    },
                    "description": "Tool designed to execute the flow 'Guardrail'. Flow details: Language Models, Mapped and Mastered..",
                    "display_description": "RunFlow. message_output - Creates a tool component from a Flow that takes all its inputs and runs it.  \n **Select a Flow to use the tool mode**",
                    "display_name": "message_output",
                    "name": "Guardrail_tool",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "Guardrail_tool"
                    ]
                  }
                ]
              }
            },
            "tool_mode": true
          },
          "showNode": true,
          "type": "RunFlow"
        },
        "dragging": false,
        "id": "RunFlow-1MCrE",
        "measured": {
          "height": 349,
          "width": 320
        },
        "position": {
          "x": 397.51835504786015,
          "y": -516.8211300673729
        },
        "selected": false,
        "type": "genericNode"
      }
    ],
    "viewport": {
      "x": 234.47151542987567,
      "y": 592.2084405235196,
      "zoom": 0.37424050854308516
    }
  },
  "description": "Powerful Prompts, Perfectly Positioned.",
  "endpoint_name": null,
  "id": "1aad718f-d81b-4477-a404-69edc4032eac",
  "is_component": false,
  "last_tested_version": "1.4.2",
  "name": "Retriever",
  "tags": []
}